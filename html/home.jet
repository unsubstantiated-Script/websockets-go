<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
          integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
          crossorigin="anonymous" referrerpolicy="no-referrer"/>
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: .5em;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col">
            <h1>
                This is the home page...
            </h1>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-8">
            <h3>Chat</h3>
            <p><a href="https://github.com">Get thee to GitHub! Straightforth!</a></p>
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" name="username" id="username" class="form-control" autocomplete="off">
            </div>
            <div class="form-group">
                <label for="password">Message:</label>
                <input type="text" name="message" id="message" class="form-control" autocomplete="off">
            </div>

            <hr>
            <a href="javascript:void(0)" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

            <input type="hidden" name="action" id="action">

            <div id="status" class="mt-2 float-end"></div>


            <div class="chatbox mt-3" id="output"></div>
        </div>

        <div class="col-md-4">
            <h3>Who's online?</h3>
            <ul id="online_users">

            </ul>
        </div>
    </div>
</div>

</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let output = document.getElementById("output")
    let userField = document.getElementById("username")
    let messageField = document.getElementById("message")

    window.onbeforeunload = () => {
        console.log("Bye suckas!")
        let jsonData = {};
        jsonData["action"] = "Left!"
        socket.send(JSON.stringify(jsonData))
    }
    //Gonna wait till the doc is loaded before executing this function
    document.addEventListener("DOMContentLoaded", function () {
        //Using a nonsecure websocket for dev. Prod would be wss  also need to set debug to false for production
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000})

        const offline = `<span class="badge bg-danger">Not Connected</span>`
        const online = `<span class="badge bg-success">Connected</span>`
        let statusDiv = document.getElementById("status")

        socket.onopen = () => {
            console.log("Successfully connected")
            statusDiv.innerHTML = online
        }

        socket.onclose = () => {
            console.log("Successfully closed")
            statusDiv.innerHTML = offline
        }

        socket.onerror = (err) => {
            console.log(err)
            statusDiv.innerHTML = offline
        }

        socket.onmessage = (msg) => {
            // console.log(msg)
            // let j = JSON.parse(msg.data)
            // console.log(j)
            let data = JSON.parse(msg.data)
            console.log("Action is...", data.action)

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) ul.removeChild(ul.firstChild) //removing old info

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach((item) => {
                            let li = document.createElement("li")
                            li.appendChild(document.createTextNode(item))
                            ul.appendChild(li)
                        })
                    }
                    break;
                case "broadcast":
                    output.innerHTML = output.innerHTML + data.message + "<br>";
                    break;

            }
        }

        userField.addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        messageField.addEventListener("keydown", (event) => {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("No connection...");
                    return false;
                }

                if ((userField.value === "") || (messageField.value === "")) {
                    fireError("Fill out the user and message fields")
                    return false;
                } else {
                    sendMessage()
                }
                event.preventDefault();
                event.stopPropagation();

            }
        })

        document.getElementById("sendBtn").addEventListener("click", () => {
            if ((userField.value === "") || (messageField.value === "")) {
                fireError("Fill out the user and message fields")
                return false;
            } else {
                sendMessage()
            }
        })

    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast"
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData))
        messageField.value = ""
    }

    function fireError(msg) {
        notie.alert({
            type: 'error', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
            text: msg,
        })
    }
</script>
</html>